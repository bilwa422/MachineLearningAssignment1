ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
dev.copy(png,file="plot4.png")
dev.off()
# Check SCC data
str(SCC)
urlzip <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
library(data.table)
fileurl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
if (!file.exists('./UCI HAR Dataset.zip')){
download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
features <- read.csv('./UCI HAR Dataset/features.txt', header = FALSE, sep = ' ')
features <- as.character(features[,2])
data.train.x <- read.table('./UCI HAR Dataset/train/X_train.txt')
data.train.activity <- read.csv('./UCI HAR Dataset/train/y_train.txt', header = FALSE, sep = ' ')
data.train.subject <- read.csv('./UCI HAR Dataset/train/subject_train.txt',header = FALSE, sep = ' ')
data.train <-  data.frame(data.train.subject, data.train.activity, data.train.x)
names(data.train) <- c(c('subject', 'activity'), features)
data.test.x <- read.table('./UCI HAR Dataset/test/X_test.txt')
data.test.activity <- read.csv('./UCI HAR Dataset/test/y_test.txt', header = FALSE, sep = ' ')
data.test.subject <- read.csv('./UCI HAR Dataset/test/subject_test.txt', header = FALSE, sep = ' ')
data.test <-  data.frame(data.test.subject, data.test.activity, data.test.x)
names(data.test) <- c(c('subject', 'activity'), features)
data.all <- rbind(data.train, data.test)
library(data.table)
fileurl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
if (!file.exists('./UCI HAR Dataset.zip')){
download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
unzip("UCI HAR Dataset.zip", exdir = getwd())
library(data.table)
fileurl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
if (!file.exists('./UCI HAR Dataset.zip'))
{download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())}
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
X <- rbind(x_train, x_test)
Y <- rbind(y_train, y_test)
Subject <- rbind(subject_train, subject_test)
Merged_Data <- cbind(Subject, Y, X)
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData <- Merged_Data <-select(subject, code, contains("mean"), contains("std"))
library(data.table)
fileurl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
library(data.table)
fileurl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
if (!file.exists('./UCI HAR Dataset.zip')){
download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())
}
if (!file.exists('./UCI HAR Dataset.zip'))
fileurl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
if (!file.exists('./UCI HAR Dataset.zip'))
{download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())}
setwd("C:/PE/Getting&CleaningPGA/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
library(plyr)
library(data.table)
subjectTrain = read.table('./train/subject_train.txt',header=FALSE)
{download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())}
library(plyr)
library(data.table)
subjectTrain = read.table('./train/subject_train.txt',header=FALSE)
xTrain = read.table('./train/x_train.txt',header=FALSE)
yTrain = read.table('./train/y_train.txt',header=FALSE)
subjectTest = read.table('./test/subject_test.txt',header=FALSE)
xTest = read.table('./test/x_test.txt',header=FALSE)
yTest = read.table('./test/y_test.txt',header=FALSE)
unzip("UCI HAR Dataset.zip", exdir = getwd())}
library(data.table)
fileurl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip'
if (!file.exists('./UCI HAR Dataset.zip'))
{download.file(fileurl,'./UCI HAR Dataset.zip', mode = 'wb')
unzip("UCI HAR Dataset.zip", exdir = getwd())}
features <- read.csv('./UCI HAR Dataset/features.txt', header = FALSE, sep = ' ')
features <- as.character(features[,2])
data.train.x <- read.table('./UCI HAR Dataset/train/X_train.txt')
data.train.activity <- read.csv('./UCI HAR Dataset/train/y_train.txt', header = FALSE, sep = ' ')
data.train.subject <- read.csv('./UCI HAR Dataset/train/subject_train.txt',header = FALSE, sep = ' ')
data.train <-  data.frame(data.train.subject, data.train.activity, data.train.x)
names(data.train) <- c(c('subject', 'activity'), features)
data.test.x <- read.table('./UCI HAR Dataset/test/X_test.txt')
data.test.activity <- read.csv('./UCI HAR Dataset/test/y_test.txt', header = FALSE, sep = ' ')
data.test.subject <- read.csv('./UCI HAR Dataset/test/subject_test.txt', header = FALSE, sep = ' ')
data.test <-  data.frame(data.test.subject, data.test.activity, data.test.x)
names(data.test) <- c(c('subject', 'activity'), features)
data.all <- rbind(data.train, data.test)
mean_std.select <- grep('mean|std', features)
data.sub <- data.all[,c(1,2,mean_std.select + 2)]
activity.labels <- read.table('./UCI HAR Dataset/activity_labels.txt', header = FALSE)
activity.labels <- as.character(activity.labels[,2])
data.sub$activity <- activity.labels[data.sub$activity]
name.new <- names(data.sub)
name.new <- gsub("[(][)]", "", name.new)
name.new <- gsub("^t", "TimeDomain_", name.new)
name.new <- gsub("^f", "FrequencyDomain_", name.new)
name.new <- gsub("Acc", "Accelerometer", name.new)
name.new <- gsub("Gyro", "Gyroscope", name.new)
name.new <- gsub("Mag", "Magnitude", name.new)
name.new <- gsub("-mean-", "_Mean_", name.new)
name.new <- gsub("-std-", "_StandardDeviation_", name.new)
name.new <- gsub("-", "_", name.new)
names(data.sub) <- name.new
data.tidy <- aggregate(data.sub[,3:81], by = list(activity = data.sub$activity, subject = data.sub$subject),FUN = mean)
write.table(x = data.tidy, file = "data_tidy.txt", row.names = FALSE)
View(name.new)
names(name.new)
setwd("C:/Getting&CleaningPGA/getdata_projectfiles_UCI HAR Dataset/UCI HAR Dataset")
getwd()
library(dplyr)
filename <- "Coursera_DS3_Final.zip"
# Checking if archieve already exists.
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
# Checking if folder exists
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
X <- rbind(x_train, x_test)
Y <- rbind(y_train, y_test)
Subject <- rbind(subject_train, subject_test)
Merged_Data <- cbind(Subject, Y, X)
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData$code <- activities[TidyData$code, 2]
names(TidyData)[2] = "activity"
names(TidyData)<-gsub("Acc", "Accelerometer", names(TidyData))
names(TidyData)<-gsub("Gyro", "Gyroscope", names(TidyData))
names(TidyData)<-gsub("BodyBody", "Body", names(TidyData))
names(TidyData)<-gsub("Mag", "Magnitude", names(TidyData))
names(TidyData)<-gsub("^t", "Time", names(TidyData))
names(TidyData)<-gsub("^f", "Frequency", names(TidyData))
names(TidyData)<-gsub("tBody", "TimeBody", names(TidyData))
names(TidyData)<-gsub("-mean()", "Mean", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-std()", "STD", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-freq()", "Frequency", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("angle", "Angle", names(TidyData))
names(TidyData)<-gsub("gravity", "Gravity", names(TidyData))
FinalData <- TidyData %>%
group_by(subject, activity) %>%
summarise_all(funs(mean))
write.table(FinalData, "FinalData.txt", row.name=FALSE)
`lifecycle::last_warnings()`
FinalData <- TidyData %>%
group_by(subject, activity) %>%
summarise_all(tibble::lst(mean))
write.table(FinalData, "FinalData.txt", row.name=FALSE)
s
str(FinalData)
FinalData
##dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation
##Loading The required package
library(dplyr)
filename <- "Coursera_DS3_Final.zip"
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
features1 <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
activities1<- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
subjectTest <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
subjectTrain <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
X <- rbind(x_train, x_test)
Y <- rbind(y_train, y_test)
Subject <- rbind(subject_train, subject_test)
Merged_Data <- cbind(Subject, Y, X)
TidyData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))
TidyData$code <- activities1[TidyData$code, 2]
names(TidyData)[2] = "activity"
names(TidyData)<-gsub("Acc", "Accelerometer", names(TidyData))
names(TidyData)<-gsub("Gyro", "Gyroscope", names(TidyData))
names(TidyData)<-gsub("BodyBody", "Body", names(TidyData))
names(TidyData)<-gsub("Mag", "Magnitude", names(TidyData))
names(TidyData)<-gsub("^t", "Time", names(TidyData))
names(TidyData)<-gsub("^f", "Frequency", names(TidyData))
names(TidyData)<-gsub("tBody", "TimeBody", names(TidyData))
names(TidyData)<-gsub("-mean()", "Mean", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-std()", "STD", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("-freq()", "Frequency", names(TidyData), ignore.case = TRUE)
names(TidyData)<-gsub("angle", "Angle", names(TidyData))
names(TidyData)<-gsub("gravity", "Gravity", names(TidyData))
FinalData <- TidyData %>%
group_by(subject, activity) %>%
summarise_all(tibble::lst(mean))
write.table(FinalData, "FinalData.txt", row.name=FALSE)
str(FinalData)
FinalData
##dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation
##Loading The required package
library(dplyr)
filename <- "Coursera_DS3_Final.zip"
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
features1 <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
activities1<- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
subjectTest <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
subjectTrain <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
X <- rbind(x_train, x_test)
Y <- rbind(y_train, y_test)
Subject <- rbind(subject_train, subject_test)
Merged_Data1 <- cbind(Subject, Y, X)
TidyData1 <- Merged_Data1 %>% select(subject, code, contains("mean"), contains("std"))
TidyData1$code <- activities1[TidyData1$code, 2]
names(TidyData1)[2] = "activity"
names(TidyData1)<-gsub("Acc", "Accelerometer", names(TidyData1))
names(TidyData1)<-gsub("Gyro", "Gyroscope", names(TidyData1))
names(TidyData1)<-gsub("BodyBody", "Body", names(TidyData1))
names(TidyData1)<-gsub("Mag", "Magnitude", names(TidyData1))
names(TidyData1)<-gsub("^t", "Time", names(TidyData1))
names(TidyData1)<-gsub("^f", "Frequency", names(TidyData1))
names(TidyData1)<-gsub("tBody", "TimeBody", names(TidyData1))
names(TidyData1)<-gsub("-mean()", "Mean", names(TidyData1), ignore.case = TRUE)
names(TidyData1)<-gsub("-std()", "STD", names(TidyData1), ignore.case = TRUE)
names(TidyData1)<-gsub("-freq()", "Frequency", names(TidyData1), ignore.case = TRUE)
names(TidyData1)<-gsub("angle", "Angle", names(TidyData1))
names(TidyData1)<-gsub("gravity", "Gravity", names(TidyData1))
Final_Data <- TidyData1%>%
group_by(subject1, activity1) %>%
summarise_all(tibble::lst(mean))
write.table(Final_Data, "FinalData.txt", row.name=FALSE)
Final_Data <- TidyData1%>%
group_by(subject, activity) %>%
summarise_all(tibble::lst(mean))
write.table(Final_Data, "FinalData.txt", row.name=FALSE)
str(Final_Data)
Final_Data
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r}
library(knitr)
library(ggplot2)
if(!file.exists("stormData.csv.bz2")) {download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "stormData.csv.bz2", method = "curl")}
if(!file.exists("stormData.csv.bz2")) {download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "stormData.csv.bz2", method = "curl")}
```{r}
```{r}
dsNOAA1 <- read.csv(bzfile("stormData.csv.bz2"), sep=",", header=T)
head(dsNOAA1)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
if(!file.exists("stormData.csv.bz2")) {download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "stormData.csv.bz2", method = "curl")}
if(!file.exists("stormData.csv.bz2")) {download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "stormData.csv.bz2", method = "curl")}
if(!file.exists("stormData.csv.bz2")) {download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "stormData.csv.bz2", method = "curl")}
TIDYNOAA1 <- dsNOAA1[,c('EVTYPE','FATALITIES','INJURIES', 'PROPDMG', 'PROPDMGEXP', 'CROPDMG', 'CROPDMGEXP')]
head(TIDYNOAA1)
str(TIDYNOAA1)
TIDYNOAA1$PROPDMGNUM = 0
TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "H", ]$PROPDMGNUM = TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "H", ]$PROPDMG * 10^2
TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "K", ]$PROPDMGNUM = TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "K", ]$PROPDMG * 10^3
TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "M", ]$PROPDMGNUM = TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "M", ]$PROPDMG * 10^6
TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "B", ]$PROPDMGNUM = TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "B", ]$PROPDMG * 10^9
head(TIDYNOAA1, 100)
TIDYNOAA1$CROPDMGNUM = 0
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "H", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "H", ]$CROPDMG * 10^2
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "K", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "K", ]$CROPDMG * 10^3
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "M", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "M", ]$CROPDMG * 10^6
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "B", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "B", ]$CROPDMG * 10^9
fatality1<- aggregate(FATALITIES ~ EVTYPE, data=TIDYNOAA1, sum)
fatality1 <- fatality1[order(-fatality1$FATALITIES), ][1:10, ]
fatality1$EVTYPE <- factor(fatality1$EVTYPE, levels = fatality1$EVTYPE)
ggplot(fatality1, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat = "identity", fill = "blue", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Fatalities") + ggtitle("Number of fatalities by top 10 Weather Events")
injuryCaused <- aggregate(INJURIES ~ EVTYPE, data=TIDYNOAA1, sum)
injuryCaused <- injuryCaused[order(-injuryCaused$INJURIES), ][1:10, ]
injuryCaused$EVTYPE <- factor(injuryCaused$EVTYPE, levels = injuryCaused$EVTYPE)
ggplot(injuryCaused, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat = "identity", fill = "blue", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Injuries") + ggtitle("Number of injuries by top 10 Weather Events")
DAMAGES1 <- aggregate(PROPDMGNUM + CROPDMGNUM ~ EVTYPE, data=TIDYNOAA1, sum)
names(DAMAGES1) = c("EVTYPE", "TOTALDAMAGE")
DAMAGES1 <- DAMAGES1[order(-DAMAGES1$TOTALDAMAGE), ][1:10, ]
DAMAGES1$EVTYPE <- factor(DAMAGES1$EVTYPE, levels = DAMAGES1$EVTYPE)
ggplot(DAMAGES1, aes(x = EVTYPE, y = TOTALDAMAGE)) +
geom_bar(stat = "identity", fill = "blue", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damages ($)") + ggtitle("Property & Crop Damages by top 10 Weather Events")
plot(pressure)
knit2html
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(ggplot2)
if(!file.exists("stormData.csv.bz2")) {download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "stormData.csv.bz2", method = "curl")}
dsNOAA1 <- read.csv(bzfile("stormData.csv.bz2"), sep=",", header=T)
head(dsNOAA1)
TIDYNOAA1 <- dsNOAA1[,c('EVTYPE','FATALITIES','INJURIES', 'PROPDMG', 'PROPDMGEXP', 'CROPDMG', 'CROPDMGEXP')]
head(TIDYNOAA1)
str(TIDYNOAA1)
TIDYNOAA1$PROPDMGNUM = 0
TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "H", ]$PROPDMGNUM = TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "H", ]$PROPDMG * 10^2
TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "K", ]$PROPDMGNUM = TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "K", ]$PROPDMG * 10^3
TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "M", ]$PROPDMGNUM = TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "M", ]$PROPDMG * 10^6
TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "B", ]$PROPDMGNUM = TIDYNOAA1[TIDYNOAA1$PROPDMGEXP == "B", ]$PROPDMG * 10^9
head(TIDYNOAA1, 100)
TIDYNOAA1$CROPDMGNUM = 0
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "H", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "H", ]$CROPDMG * 10^2
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "K", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "K", ]$CROPDMG * 10^3
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "M", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "M", ]$CROPDMG * 10^6
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "B", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "B", ]$CROPDMG * 10^9
injuryCaused <- aggregate(INJURIES ~ EVTYPE, data=TIDYNOAA1, sum)
injuryCaused <- injuryCaused[order(-injuryCaused$INJURIES), ][1:10, ]
injuryCaused$EVTYPE <- factor(injuryCaused$EVTYPE, levels = injuryCaused$EVTYPE)
ggplot(injuryCaused, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat = "identity", fill = "blue", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Injuries") + ggtitle("Number of injuries by top 10 Weather Events")
DAMAGES1 <- aggregate(PROPDMGNUM + CROPDMGNUM ~ EVTYPE, data=TIDYNOAA1, sum)
names(DAMAGES1) = c("EVTYPE", "TOTALDAMAGE")
DAMAGES1 <- DAMAGES1[order(-DAMAGES1$TOTALDAMAGE), ][1:10, ]
DAMAGES1$EVTYPE <- factor(DAMAGES1$EVTYPE, levels = DAMAGES1$EVTYPE)
ggplot(DAMAGES1, aes(x = EVTYPE, y = TOTALDAMAGE)) +
geom_bar(stat = "identity", fill = "blue", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damages ($)") + ggtitle("Property & Crop Damages by top 10 Weather Events")
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "H", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "H", ]$CROPDMG * 10^2
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "K", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "K", ]$CROPDMG * 10^3
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "M", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "M", ]$CROPDMG * 10^6
TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "B", ]$CROPDMGNUM = TIDYNOAA1[TIDYNOAA1$CROPDMGEXP == "B", ]$CROPDMG * 10^9
fatality1<- aggregate(FATALITIES ~ EVTYPE, data=TIDYNOAA1, sum)
fatality1 <- fatality1[order(-fatality1$FATALITIES), ][1:10, ]
fatality1$EVTYPE <- factor(fatality1$EVTYPE, levels = fatality1$EVTYPE)
ggplot(fatality1, aes(x = EVTYPE, y = FATALITIES)) +
geom_bar(stat = "identity", fill = "blue", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Fatalities") + ggtitle("Number of fatalities by top 10 Weather Events")
injuryCaused <- aggregate(INJURIES ~ EVTYPE, data=TIDYNOAA1, sum)
injuryCaused <- injuryCaused[order(-injuryCaused$INJURIES), ][1:10, ]
injuryCaused$EVTYPE <- factor(injuryCaused$EVTYPE, levels = injuryCaused$EVTYPE)
ggplot(injuryCaused, aes(x = EVTYPE, y = INJURIES)) +
geom_bar(stat = "identity", fill = "blue", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Injuries") + ggtitle("Number of injuries by top 10 Weather Events")
DAMAGES1 <- aggregate(PROPDMGNUM + CROPDMGNUM ~ EVTYPE, data=TIDYNOAA1, sum)
names(DAMAGES1) = c("EVTYPE", "TOTALDAMAGE")
DAMAGES1 <- DAMAGES1[order(-DAMAGES1$TOTALDAMAGE), ][1:10, ]
DAMAGES1$EVTYPE <- factor(DAMAGES1$EVTYPE, levels = DAMAGES1$EVTYPE)
ggplot(DAMAGES1, aes(x = EVTYPE, y = TOTALDAMAGE)) +
geom_bar(stat = "identity", fill = "blue", las = 3) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Event Type") + ylab("Damages ($)") + ggtitle("Property & Crop Damages by top 10 Weather Events")
##dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation
##Loading The required package
library(dplyr)
filename <- "Coursera_DS3_Final.zip"
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
features1 <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
activities1<- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
subjectTest <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
subjectTrain <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
X <- rbind(x_train, x_test)
Y <- rbind(y_train, y_test)
Subject <- rbind(subject_train, subject_test)
Merged_Data1 <- cbind(Subject, Y, X)
TidyData1 <- Merged_Data1 %>% select(subject, code, contains("mean"), contains("std"))
TidyData1$code <- activities1[TidyData1$code, 2]
names(TidyData1)[2] = "activity"
names(TidyData1)<-gsub("Acc", "Accelerometer", names(TidyData1))
names(TidyData1)<-gsub("Gyro", "Gyroscope", names(TidyData1))
names(TidyData1)<-gsub("BodyBody", "Body", names(TidyData1))
names(TidyData1)<-gsub("Mag", "Magnitude", names(TidyData1))
names(TidyData1)<-gsub("^t", "Time", names(TidyData1))
names(TidyData1)<-gsub("^f", "Frequency", names(TidyData1))
names(TidyData1)<-gsub("tBody", "TimeBody", names(TidyData1))
names(TidyData1)<-gsub("-mean()", "Mean", names(TidyData1), ignore.case = TRUE)
names(TidyData1)<-gsub("-std()", "STD", names(TidyData1), ignore.case = TRUE)
names(TidyData1)<-gsub("-freq()", "Frequency", names(TidyData1), ignore.case = TRUE)
names(TidyData1)<-gsub("angle", "Angle", names(TidyData1))
names(TidyData1)<-gsub("gravity", "Gravity", names(TidyData1))
Final_Data <- TidyData1%>%
group_by(subject, activity) %>%
summarise_all(tibble::lst(mean))
write.table(Final_Data, "FinalData.txt", row.name=FALSE)
str(Final_Data)
Final_Data
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(caret)
library(kernlab)
## Data Preprocessing
```{r, cache = T}
library(lattice)
library(ggplot2)
library(caret)
library(kernlab)
library(rattle)
library(corrplot)
set.seed(1234)
```
insall.packages("kernlab)
install.packages(kernlab)
install.packages("kernlab")
install.packages("kernlab")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(ggplot2)
library(caret)
library(kernlab)
library(rattle)
library(corrplot)
set.seed(1234)
traincsv <- read.csv("./data/pml-training.csv")
library(readr)
pml_testing <- read_csv("D:/DataScience/MachineLearningAssignment1/pml-testing.csv")
View(pml_testing)
library(readr)
pml_training <- read_csv("D:/DataScience/MachineLearningAssignment1/pml-training.csv")
View(pml_training)
traincsv <- read.csv("./data/pml-training.csv")
## Data Preprocessing
```{r, cache = T}
library(lattice)
library(ggplot2)
library(caret)
library(kernlab)
library(rattle)
library(corrplot)
set.seed(1234)
```
### Read the Data
After downloading the data from the data source, we can read the two csv files into two data frames.
```{r, cache = T}
traincsv <- read.csv("./data/pml-training.csv")
testcsv <- read.csv("./data/pml-testing.csv")
dim(traincsv)
dim(testcsv)
```
setwd("D:\\DataScience\\MachineLearningAssignment1")
## Data Preprocessing
```{r, cache = T}
library(lattice)
library(ggplot2)
library(caret)
library(kernlab)
library(rattle)
library(corrplot)
set.seed(1234)
```
### Read the Data
After downloading the data from the data source, we can read the two csv files into two data frames.
```{r, cache = T}
traincsv <- read.csv("./data/pml-training.csv")
testcsv <- read.csv("./data/pml-testing.csv")
dim(traincsv)
dim(testcsv)
```
setwd("D:\\DataScience\\MachineLearningAssignment1")
getwd()
traincsv <- read.csv("./data/pml-training.csv")
traincsv <- read.csv("./data/pml-training.csv")
